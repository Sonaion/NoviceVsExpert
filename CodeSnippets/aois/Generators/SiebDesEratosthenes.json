{
    "font-normal": "JetBrainsMono-Regular.ttf",
    "font-bold": "JetBrainsMono-Bold.ttf",
    "font-italic": "JetBrainsMono-BoldItalic.ttf",
    "font-bold-italic": "JetBrainsMono-Italic.ttf",
    "font-size": 19,
    "width-margin": 5,
    "height-margin": 5,
    "spacing": 1,
    "background-color": [
        255,
        255,
        255
    ],
    "source-code": [
        "    [AOI=method_signature]public static List<Integer> [AOI=method_identifier]sieveOfEratosthenes[/AOI][AOI=method_argument_declaration](int n)[/AOI][/AOI] {",
        "        boolean[] prime = new boolean[[AOI=arithmetic_expression]n + 1[/AOI]];",
        "        [AOI=for][AOI=for_head]for (int i = 0; i <= n; i++)[/AOI][AOI=for_body]",
        "            prime[i] = true;[/AOI][/AOI]",
        "",
        "        [AOI=for][AOI=for_head]for (int p = 2; [AOI=arithmetic_expression]p * p[/AOI] <= n; p++) [/AOI][AOI=for_body]{",
        "            [AOI=if][AOI=if_head]if (prime[p]) [/AOI][AOI=if_body]{",
        "                [AOI=for][AOI=for_head]for (int i = [AOI=arithmetic_expression]p * p[/AOI]; i <= n; i += p)[/AOI][AOI=for_body]",
        "                    prime[i] = false;[/AOI][/AOI]",
        "            }[/AOI][/AOI]",
        "        }[/AOI][/AOI]",
        "",
        "        List<Integer> primes = [AOI=method_call]new [AOI=method_call_identifier]ArrayList<>[/AOI][AOI=method_arguments]()[/AOI];",
        "        [AOI=for][AOI=for_head]for (int i = 2; i <= n; i++) [/AOI][AOI=for_body]{",
        "            [AOI=if][AOI=if_head]if (prime[i]) [/AOI][AOI=if_body]{",
        "                primes.add(i);",
        "            }[/AOI][/AOI]",
        "        }[/AOI][/AOI]",
        "        return primes;",
        "    }"
    ]
}