{
    "font-normal": "JetBrainsMono-Regular.ttf",
    "font-bold": "JetBrainsMono-Bold.ttf",
    "font-italic": "JetBrainsMono-BoldItalic.ttf",
    "font-bold-italic": "JetBrainsMono-Italic.ttf",
    "font-size": 19,
    "width-margin": 5,
    "height-margin": 5,
    "spacing": 1,
    "background-color": [
        255,
        255,
        255
    ],
    "source-code": [
        "    [AOI=method_signature] public static List<String> [AOI=method_identifier]permute[/AOI][AOI=method_argument_declaration](String str, int l, int r) [/AOI][/AOI]{",
        "        List<String> result = [AOI=method_call] new [AOI=method_call_identifier] ArrayList<> [/AOI][AOI=method_arguments]()[/AOI][/AOI];",
        "        [AOI=if_statement][AOI=if_head] if (l == r)[/AOI][AOI=if_body]",
        "            [AOI=method_call]result.[AOI=method_call_identifier]add[/AOI][AOI=method_arguments](str)[/AOI][/AOI];",
        "        [/AOI][/AOI][AOI=else_statement][AOI=else_head] else [/AOI][AOI=else_body] {",
        "            [AOI=for_loop][AOI=for_head]for (int i = l; i <= r; i++)[/AOI][AOI=for_body] {",
        "                str = [AOI=method_call][AOI=method_call_identifier]swap[/AOI][AOI=method_arguments](str, l, i)[/AOI][/AOI];",
        "                List<String> temp = [AOI=method_call][AOI=method_call_identifier]permute[/AOI][AOI=method_arguments](str, [AOI=arithmetic_expression]l + 1[/AOI], r)[/AOI][/AOI];",
        "                [AOI=method_call]result.[AOI=method_call_identifier]addAll[/AOI][AOI=method_arguments](temp)[/AOI][/AOI];",
        "                str = [AOI=method_call][AOI=method_call_identifier]swap[/AOI][AOI=method_arguments](str, l, i)[/AOI][/AOI];",
        "            }[/AOI][/AOI]",
        "        }[/AOI][/AOI]",
        "        return result;",
        "    }",
        "",
        "    [AOI=method_signature] public static String [AOI=method_identifier]swap[/AOI][AOI=method_argument_declaration](String a, int i, int j)[/AOI][/AOI] {",
        "        char temp;",
        "        char[] charArray = [AOI=method_call]a.[AOI=method_call_identifier]toCharArray[/AOI][AOI=method_arguments]()[/AOI][/AOI];",
        "        temp = charArray[i];",
        "        charArray[i] = charArray[j];",
        "        charArray[j] = temp;",
        "        return [AOI=method_call]String.[AOI=method_call_identifier]valueOf[/AOI][AOI=method_arguments](charArray)[/AOI][/AOI];",
        "    }"
    ]
}