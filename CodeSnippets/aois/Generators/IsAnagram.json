{
    "font-normal": "JetBrainsMono-Regular.ttf",
    "font-bold": "JetBrainsMono-Bold.ttf",
    "font-italic": "JetBrainsMono-BoldItalic.ttf",
    "font-bold-italic": "JetBrainsMono-Italic.ttf",
    "font-size": 19,
    "width-margin": 5,
    "height-margin": 5,
    "spacing": 1,
    "background-color": [
        255,
        255,
        255
    ],
    "source-code": [
        "    [AOI=method_signature] public static String [AOI=method_identifier]sort[/AOI][AOI=method_argument_declaration](String word)[/AOI][/AOI] {",
        "        StringBuilder builder = [AOI=method_call] new [AOI=method_call_identifier] StringBuilder [/AOI][AOI=method_arguments] (word)[/AOI][/AOI];",
        "        [AOI=for_loop][AOI=for_head] for (int i = 1; i < [AOI=method_call]builder.[AOI=method_call_identifier]length[/AOI][AOI=method_arguments]()[/AOI][/AOI]; i++) [/AOI][AOI=for_body]{",
        "            char temp = [AOI=method_call]builder.[AOI=method_call_identifier]charAt[/AOI][AOI=method_arguments](i)[/AOI][/AOI];",
        "            int j = i;",
        "            [AOI=while_loop][AOI=while_head] while (j > 0 && [AOI=method_call]builder.[AOI=method_call_identifier]charAt[/AOI][AOI=method_arguments]([AOI=arithmetic_expression]j - 1[/AOI])[/AOI][/AOI] > temp) [/AOI][AOI=while_body]{",
        "                [AOI=method_call]builder.[AOI=method_call_identifier]setCharAt[/AOI][AOI=method_arguments](j, [AOI=method_call]builder.[AOI=method_call_identifier]charAt([AOI=arithmetic_expression]j - 1[/AOI])[/AOI][/AOI])[/AOI][/AOI];",
        "                j--;",
        "            }[/AOI][/AOI]",
        "            [AOI=method_call]builder.[AOI=method_call_identifier]setCharAt[/AOI][AOI=method_arguments](j, temp)[/AOI][/AOI];",
        "        }[/AOI][/AOI]",
        "        return [AOI=method_call]builder.[AOI=method_call_identifier]toString[/AOI][AOI=method_arguments]()[/AOI][/AOI];",
        "    }",
        "",
        "    [AOI=method_signature] public static boolean [AOI=method_identifier]isAnagram[/AOI][AOI=method_argument_declaration](String word1, String word2)[/AOI][/AOI] {",
        "        [AOI=if_statement][AOI=if_head] if ([AOI=method_call]word1.[AOI=method_call_identifier]length[/AOI][AOI=method_arguments]()[/AOI][/AOI] != [AOI=method_call]word2.[AOI=method_call_identifier]length[/AOI][AOI=method_arguments]()[/AOI][/AOI]) [/AOI][AOI=if_body] {",
        "            return false;",
        "        }[/AOI][/AOI]",
        "        word1 = [AOI=method_call][AOI=method_call_identifier]sort[/AOI][AOI=method_arguments](word1)[/AOI][/AOI];",
        "        word2 = [AOI=method_call][AOI=method_call_identifier]sort[/AOI][AOI=method_arguments](word2)[/AOI][/AOI];",
        "",
        "        [AOI=for_loop][AOI=for_head] for (int i = 0; i < [AOI=method_call]word1.[AOI=method_call_identifier]length[/AOI][AOI=method_arguments]()[/AOI][/AOI]; i++) [/AOI][AOI=for_body]{",
        "            [AOI=if_statement][AOI=if_head] if ([AOI=method_call]word1.[AOI=method_call_identifier]charAt[/AOI][AOI=method_arguments](i)[/AOI][/AOI] != [AOI=method_call]word2.[AOI=method_call_identifier]charAt[/AOI][AOI=method_arguments](i)[/AOI][/AOI]) [/AOI][AOI=if_body] {",
        "                return false;",
        "            }[/AOI][/AOI]",
        "        }[/AOI][/AOI]",
        "        return true;",
        "    }"
    ]
}